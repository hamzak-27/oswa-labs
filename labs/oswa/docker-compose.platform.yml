# OSWA Labs Platform - Complete Deployment with VPN Integration
version: '3.8'

networks:
  # Main platform network
  oswa-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16

  # VPN Lab Networks (OffSec-style)
  xss-lab-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.1.0/24

  jwt-lab-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.2.0/24

  sql-lab-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.3.0/24

volumes:
  mongodb-data:
  redis-data:
  vpn-data:
  mysql-data:
  jwt-mongodb-data:
  xss-mongodb-data:

services:
  # ==========================================
  # CORE PLATFORM SERVICES
  # ==========================================
  
  # MongoDB - Main Platform Database
  mongodb:
    image: mongo:5.0
    container_name: oswa-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: oswa_platform_2024
      MONGO_INITDB_DATABASE: oswa_platform
    volumes:
      - mongodb-data:/data/db
    networks:
      - oswa-network
    ports:
      - "27017:27017"

  # Redis - Session & Cache Management
  redis:
    image: redis:7-alpine
    container_name: oswa-redis
    restart: unless-stopped
    command: redis-server --requirepass oswa_redis_2024
    volumes:
      - redis-data:/data
    networks:
      - oswa-network
    ports:
      - "6379:6379"

  # Lab Management API Backend
  lab-management-api:
    build: ./lab-management-api
    container_name: oswa-lab-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://admin:oswa_platform_2024@mongodb:27017/oswa_platform?authSource=admin
      - REDIS_URL=redis://:oswa_redis_2024@redis:6379
      - JWT_SECRET=oswa_super_secret_key_2024
      - VPN_SERVER_HOST=vpn-server
      - VPN_MANAGEMENT_PORT=7505
      - COMPOSE_FILE=docker-compose.platform.yml
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - .:/app/workspace
    networks:
      - oswa-network
      - xss-lab-network
      - jwt-lab-network
      - sql-lab-network
    ports:
      - "8000:8000"
    depends_on:
      - mongodb
      - redis
      - vpn-server

  # React Dashboard Frontend
  oswa-dashboard:
    build: ./oswa-dashboard
    container_name: oswa-dashboard
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_VPN_SERVER=localhost:1194
    networks:
      - oswa-network
    ports:
      - "3002:3000"
    depends_on:
      - lab-management-api

  # ==========================================
  # VPN SERVER
  # ==========================================
  
  # OpenVPN Server - Lab Network Access
  vpn-server:
    build: ./vpn-server
    container_name: oswa-vpn-server
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    environment:
      - VPN_SERVER_HOST=localhost
      - VPN_SERVER_PORT=1194
    volumes:
      - vpn-data:/etc/openvpn
    networks:
      oswa-network:
        ipv4_address: 172.18.0.2
      xss-lab-network:
        ipv4_address: 172.20.1.1
      jwt-lab-network:
        ipv4_address: 172.20.2.1
      sql-lab-network:
        ipv4_address: 172.20.3.1
    ports:
      - "1194:1194/udp"  # OpenVPN
      - "7505:7505"      # Management Interface
    sysctls:
      - net.ipv4.ip_forward=1

  # ==========================================
  # XSS LAB
  # ==========================================
  
  # XSS Lab Database
  xss-mongodb:
    image: mongo:5.0
    container_name: oswa-xss-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: xss_lab_2024
      MONGO_INITDB_DATABASE: oswa_xss
    volumes:
      - xss-mongodb-data:/data/db
      - ./xss-lab/database/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      xss-lab-network:
        ipv4_address: 172.20.1.5

  # XSS Lab Backend
  xss-backend:
    build: ./xss-lab/backend
    container_name: oswa-xss-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://admin:xss_lab_2024@xss-mongodb:27017/oswa_xss?authSource=admin
      - ENABLE_DEBUG=true
    networks:
      xss-lab-network:
        ipv4_address: 172.20.1.8
    depends_on:
      - xss-mongodb

  # XSS Lab Frontend  
  xss-frontend:
    build: ./xss-lab/frontend
    container_name: oswa-xss-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://172.20.1.8:5000
    networks:
      xss-lab-network:
        ipv4_address: 172.20.1.10
    ports:
      - "3000:3000"  # Development access
    depends_on:
      - xss-backend

  # ==========================================
  # JWT LAB
  # ==========================================
  
  # JWT Lab Database
  jwt-mongodb:
    image: mongo:5.0
    container_name: oswa-jwt-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: jwt_lab_2024
      MONGO_INITDB_DATABASE: oswa_jwt
    volumes:
      - jwt-mongodb-data:/data/db
      - ./jwt-attacks-lab/database/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      jwt-lab-network:
        ipv4_address: 172.20.2.5

  # JWT Lab Backend
  jwt-backend:
    build: ./jwt-attacks-lab/backend
    container_name: oswa-jwt-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://admin:jwt_lab_2024@jwt-mongodb:27017/oswa_jwt?authSource=admin
      - JWT_SECRET=weak_secret_for_lab
      - RSA_PRIVATE_KEY_PATH=/app/keys/private.pem
      - RSA_PUBLIC_KEY_PATH=/app/keys/public.pem
    volumes:
      - ./jwt-attacks-lab/keys:/app/keys:ro
    networks:
      jwt-lab-network:
        ipv4_address: 172.20.2.8
    depends_on:
      - jwt-mongodb

  # JWT Lab Frontend
  jwt-frontend:
    build: ./jwt-attacks-lab/frontend
    container_name: oswa-jwt-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://172.20.2.8:5001
    networks:
      jwt-lab-network:
        ipv4_address: 172.20.2.10
    ports:
      - "3001:3000"  # Development access
    depends_on:
      - jwt-backend

  # ==========================================
  # SQL INJECTION LAB
  # ==========================================
  
  # SQL Lab Database
  sql-mysql:
    image: mysql:8.0
    container_name: oswa-sql-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: oswa_sql_root_2024
      MYSQL_DATABASE: oswa_sqli
      MYSQL_USER: webapp
      MYSQL_PASSWORD: webapp_password
    volumes:
      - mysql-data:/var/lib/mysql
      - ./sql-injection-lab/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      sql-lab-network:
        ipv4_address: 172.20.3.5

  # SQL Lab Web Application
  sql-webapp:
    build: ./sql-injection-lab
    container_name: oswa-sql-webapp
    restart: unless-stopped
    environment:
      - MYSQL_HOST=sql-mysql
      - MYSQL_DATABASE=oswa_sqli
      - MYSQL_USER=webapp
      - MYSQL_PASSWORD=webapp_password
    volumes:
      - ./sql-injection-lab/web-app:/var/www/html
    networks:
      sql-lab-network:
        ipv4_address: 172.20.3.10
    ports:
      - "61505:80"  # Development access
    depends_on:
      - sql-mysql

  # ==========================================
  # NGINX REVERSE PROXY
  # ==========================================
  
  nginx:
    image: nginx:alpine
    container_name: oswa-nginx
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - oswa-network
      - xss-lab-network
      - jwt-lab-network  
      - sql-lab-network
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - oswa-dashboard
      - xss-frontend
      - jwt-frontend
      - sql-webapp